/* automatically generated by rust-bindgen */
// bindgen /usr/local/opt/krb5/include/gssapi/gssapi_krb5.h --output gssapi-sys/src/gssapi_krb5_h.rs --match=gssapi_krb5.h --match=krb5.h --match=com_err.h --match stdarg.h --builtins

use gssapi_h::*;

pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub enum _profile_t { }
pub type krb5_octet = ::std::os::raw::c_uchar;
pub type krb5_int16 = ::std::os::raw::c_short;
pub type krb5_ui_2 = ::std::os::raw::c_ushort;
pub type krb5_int32 = ::std::os::raw::c_int;
pub type krb5_ui_4 = ::std::os::raw::c_uint;
pub type krb5_boolean = ::std::os::raw::c_uint;
pub type krb5_msgtype = ::std::os::raw::c_uint;
pub type krb5_kvno = ::std::os::raw::c_uint;
pub type krb5_addrtype = krb5_int32;
pub type krb5_enctype = krb5_int32;
pub type krb5_cksumtype = krb5_int32;
pub type krb5_authdatatype = krb5_int32;
pub type krb5_keyusage = krb5_int32;
pub type krb5_preauthtype = krb5_int32;
pub type krb5_flags = krb5_int32;
pub type krb5_timestamp = krb5_int32;
pub type krb5_error_code = krb5_int32;
pub type krb5_deltat = krb5_int32;
pub type krb5_magic = krb5_error_code;
#[repr(C)]
#[derive(Debug)]
pub struct _krb5_data {
    pub magic: krb5_magic,
    pub length: ::std::os::raw::c_uint,
    pub data: *mut ::std::os::raw::c_char,
}
impl ::std::default::Default for _krb5_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_data = _krb5_data;
#[repr(C)]
#[derive(Debug)]
pub struct _krb5_octet_data {
    pub magic: krb5_magic,
    pub length: ::std::os::raw::c_uint,
    pub data: *mut krb5_octet,
}
impl ::std::default::Default for _krb5_octet_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_octet_data = _krb5_octet_data;
pub type krb5_pointer = *mut ::std::os::raw::c_void;
pub type krb5_const_pointer = *const ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug)]
pub struct krb5_principal_data {
    pub magic: krb5_magic,
    pub realm: krb5_data,
    pub data: *mut krb5_data,
    pub length: krb5_int32,
    pub type_: krb5_int32,
}
impl ::std::default::Default for krb5_principal_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_principal = *mut krb5_principal_data;
pub type krb5_const_principal = *const krb5_principal_data;
#[repr(C)]
#[derive(Debug)]
pub struct _krb5_address {
    pub magic: krb5_magic,
    pub addrtype: krb5_addrtype,
    pub length: ::std::os::raw::c_uint,
    pub contents: *mut krb5_octet,
}
impl ::std::default::Default for _krb5_address {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_address = _krb5_address;
pub enum _krb5_context { }
pub type krb5_context = *mut _krb5_context;
pub enum _krb5_auth_context { }
pub type krb5_auth_context = *mut _krb5_auth_context;
pub enum _krb5_cryptosystem_entry { }
#[repr(C)]
#[derive(Debug)]
pub struct _krb5_keyblock {
    pub magic: krb5_magic,
    pub enctype: krb5_enctype,
    pub length: ::std::os::raw::c_uint,
    pub contents: *mut krb5_octet,
}
impl ::std::default::Default for _krb5_keyblock {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_keyblock = _krb5_keyblock;
#[repr(C)]
#[derive(Debug)]
pub struct _krb5_encrypt_block {
    pub magic: krb5_magic,
    pub crypto_entry: krb5_enctype,
    pub key: *mut krb5_keyblock,
}
impl ::std::default::Default for _krb5_encrypt_block {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_encrypt_block = _krb5_encrypt_block;
#[repr(C)]
#[derive(Debug)]
pub struct _krb5_checksum {
    pub magic: krb5_magic,
    pub checksum_type: krb5_cksumtype,
    pub length: ::std::os::raw::c_uint,
    pub contents: *mut krb5_octet,
}
impl ::std::default::Default for _krb5_checksum {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_checksum = _krb5_checksum;
#[repr(C)]
#[derive(Debug)]
pub struct _krb5_enc_data {
    pub magic: krb5_magic,
    pub enctype: krb5_enctype,
    pub kvno: krb5_kvno,
    pub ciphertext: krb5_data,
}
impl ::std::default::Default for _krb5_enc_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_enc_data = _krb5_enc_data;
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed1 {
    KRB5_C_RANDSOURCE_OLDAPI = 0,
    KRB5_C_RANDSOURCE_OSRAND = 1,
    KRB5_C_RANDSOURCE_TRUSTEDPARTY = 2,
    KRB5_C_RANDSOURCE_TIMING = 3,
    KRB5_C_RANDSOURCE_EXTERNAL_PROTOCOL = 4,
    KRB5_C_RANDSOURCE_MAX = 5,
}
#[repr(C)]
#[derive(Debug)]
pub struct _krb5_ticket_times {
    pub authtime: krb5_timestamp,
    pub starttime: krb5_timestamp,
    pub endtime: krb5_timestamp,
    pub renew_till: krb5_timestamp,
}
impl ::std::default::Default for _krb5_ticket_times {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_ticket_times = _krb5_ticket_times;
#[repr(C)]
#[derive(Debug)]
pub struct _krb5_authdata {
    pub magic: krb5_magic,
    pub ad_type: krb5_authdatatype,
    pub length: ::std::os::raw::c_uint,
    pub contents: *mut krb5_octet,
}
impl ::std::default::Default for _krb5_authdata {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_authdata = _krb5_authdata;
#[repr(C)]
#[derive(Debug)]
pub struct _krb5_transited {
    pub magic: krb5_magic,
    pub tr_type: krb5_octet,
    pub tr_contents: krb5_data,
}
impl ::std::default::Default for _krb5_transited {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_transited = _krb5_transited;
#[repr(C)]
#[derive(Debug)]
pub struct _krb5_enc_tkt_part {
    pub magic: krb5_magic,
    pub flags: krb5_flags,
    pub session: *mut krb5_keyblock,
    pub client: krb5_principal,
    pub transited: krb5_transited,
    pub times: krb5_ticket_times,
    pub caddrs: *mut *mut krb5_address,
    pub authorization_data: *mut *mut krb5_authdata,
}
impl ::std::default::Default for _krb5_enc_tkt_part {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_enc_tkt_part = _krb5_enc_tkt_part;
#[repr(C)]
#[derive(Debug)]
pub struct _krb5_ticket {
    pub magic: krb5_magic,
    pub server: krb5_principal,
    pub enc_part: krb5_enc_data,
    pub enc_part2: *mut krb5_enc_tkt_part,
}
impl ::std::default::Default for _krb5_ticket {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_ticket = _krb5_ticket;
#[repr(C)]
#[derive(Debug)]
pub struct _krb5_authenticator {
    pub magic: krb5_magic,
    pub client: krb5_principal,
    pub checksum: *mut krb5_checksum,
    pub cusec: krb5_int32,
    pub ctime: krb5_timestamp,
    pub subkey: *mut krb5_keyblock,
    pub seq_number: krb5_ui_4,
    pub authorization_data: *mut *mut krb5_authdata,
}
impl ::std::default::Default for _krb5_authenticator {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_authenticator = _krb5_authenticator;
#[repr(C)]
#[derive(Debug)]
pub struct _krb5_tkt_authent {
    pub magic: krb5_magic,
    pub ticket: *mut krb5_ticket,
    pub authenticator: *mut krb5_authenticator,
    pub ap_options: krb5_flags,
}
impl ::std::default::Default for _krb5_tkt_authent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_tkt_authent = _krb5_tkt_authent;
#[repr(C)]
#[derive(Debug)]
pub struct _krb5_creds {
    pub magic: krb5_magic,
    pub client: krb5_principal,
    pub server: krb5_principal,
    pub keyblock: krb5_keyblock,
    pub times: krb5_ticket_times,
    pub is_skey: krb5_boolean,
    pub ticket_flags: krb5_flags,
    pub addresses: *mut *mut krb5_address,
    pub ticket: krb5_data,
    pub second_ticket: krb5_data,
    pub authdata: *mut *mut krb5_authdata,
}
impl ::std::default::Default for _krb5_creds {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_creds = _krb5_creds;
#[repr(C)]
#[derive(Debug)]
pub struct _krb5_last_req_entry {
    pub magic: krb5_magic,
    pub lr_type: krb5_int32,
    pub value: krb5_timestamp,
}
impl ::std::default::Default for _krb5_last_req_entry {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_last_req_entry = _krb5_last_req_entry;
#[repr(C)]
#[derive(Debug)]
pub struct _krb5_pa_data {
    pub magic: krb5_magic,
    pub pa_type: krb5_preauthtype,
    pub length: ::std::os::raw::c_uint,
    pub contents: *mut krb5_octet,
}
impl ::std::default::Default for _krb5_pa_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_pa_data = _krb5_pa_data;
#[repr(C)]
#[derive(Debug)]
pub struct _krb5_kdc_req {
    pub magic: krb5_magic,
    pub msg_type: krb5_msgtype,
    pub padata: *mut *mut krb5_pa_data,
    pub kdc_options: krb5_flags,
    pub client: krb5_principal,
    pub server: krb5_principal,
    pub from: krb5_timestamp,
    pub till: krb5_timestamp,
    pub rtime: krb5_timestamp,
    pub nonce: krb5_int32,
    pub nktypes: ::std::os::raw::c_int,
    pub ktype: *mut krb5_enctype,
    pub addresses: *mut *mut krb5_address,
    pub authorization_data: krb5_enc_data,
    pub unenc_authdata: *mut *mut krb5_authdata,
    pub second_ticket: *mut *mut krb5_ticket,
}
impl ::std::default::Default for _krb5_kdc_req {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_kdc_req = _krb5_kdc_req;
#[repr(C)]
#[derive(Debug)]
pub struct _krb5_enc_kdc_rep_part {
    pub magic: krb5_magic,
    pub msg_type: krb5_msgtype,
    pub session: *mut krb5_keyblock,
    pub last_req: *mut *mut krb5_last_req_entry,
    pub nonce: krb5_int32,
    pub key_exp: krb5_timestamp,
    pub flags: krb5_flags,
    pub times: krb5_ticket_times,
    pub server: krb5_principal,
    pub caddrs: *mut *mut krb5_address,
}
impl ::std::default::Default for _krb5_enc_kdc_rep_part {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_enc_kdc_rep_part = _krb5_enc_kdc_rep_part;
#[repr(C)]
#[derive(Debug)]
pub struct _krb5_kdc_rep {
    pub magic: krb5_magic,
    pub msg_type: krb5_msgtype,
    pub padata: *mut *mut krb5_pa_data,
    pub client: krb5_principal,
    pub ticket: *mut krb5_ticket,
    pub enc_part: krb5_enc_data,
    pub enc_part2: *mut krb5_enc_kdc_rep_part,
}
impl ::std::default::Default for _krb5_kdc_rep {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_kdc_rep = _krb5_kdc_rep;
#[repr(C)]
#[derive(Debug)]
pub struct _krb5_error {
    pub magic: krb5_magic,
    pub ctime: krb5_timestamp,
    pub cusec: krb5_int32,
    pub susec: krb5_int32,
    pub stime: krb5_timestamp,
    pub error: krb5_ui_4,
    pub client: krb5_principal,
    pub server: krb5_principal,
    pub text: krb5_data,
    pub e_data: krb5_data,
}
impl ::std::default::Default for _krb5_error {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_error = _krb5_error;
#[repr(C)]
#[derive(Debug)]
pub struct _krb5_ap_req {
    pub magic: krb5_magic,
    pub ap_options: krb5_flags,
    pub ticket: *mut krb5_ticket,
    pub authenticator: krb5_enc_data,
}
impl ::std::default::Default for _krb5_ap_req {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_ap_req = _krb5_ap_req;
#[repr(C)]
#[derive(Debug)]
pub struct _krb5_ap_rep {
    pub magic: krb5_magic,
    pub enc_part: krb5_enc_data,
}
impl ::std::default::Default for _krb5_ap_rep {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_ap_rep = _krb5_ap_rep;
#[repr(C)]
#[derive(Debug)]
pub struct _krb5_ap_rep_enc_part {
    pub magic: krb5_magic,
    pub ctime: krb5_timestamp,
    pub cusec: krb5_int32,
    pub subkey: *mut krb5_keyblock,
    pub seq_number: krb5_ui_4,
}
impl ::std::default::Default for _krb5_ap_rep_enc_part {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_ap_rep_enc_part = _krb5_ap_rep_enc_part;
#[repr(C)]
#[derive(Debug)]
pub struct _krb5_response {
    pub magic: krb5_magic,
    pub message_type: krb5_octet,
    pub response: krb5_data,
    pub expected_nonce: krb5_int32,
    pub request_time: krb5_timestamp,
}
impl ::std::default::Default for _krb5_response {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_response = _krb5_response;
#[repr(C)]
#[derive(Debug)]
pub struct _krb5_cred_info {
    pub magic: krb5_magic,
    pub session: *mut krb5_keyblock,
    pub client: krb5_principal,
    pub server: krb5_principal,
    pub flags: krb5_flags,
    pub times: krb5_ticket_times,
    pub caddrs: *mut *mut krb5_address,
}
impl ::std::default::Default for _krb5_cred_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_cred_info = _krb5_cred_info;
#[repr(C)]
#[derive(Debug)]
pub struct _krb5_cred_enc_part {
    pub magic: krb5_magic,
    pub nonce: krb5_int32,
    pub timestamp: krb5_timestamp,
    pub usec: krb5_int32,
    pub s_address: *mut krb5_address,
    pub r_address: *mut krb5_address,
    pub ticket_info: *mut *mut krb5_cred_info,
}
impl ::std::default::Default for _krb5_cred_enc_part {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_cred_enc_part = _krb5_cred_enc_part;
#[repr(C)]
#[derive(Debug)]
pub struct _krb5_cred {
    pub magic: krb5_magic,
    pub tickets: *mut *mut krb5_ticket,
    pub enc_part: krb5_enc_data,
    pub enc_part2: *mut krb5_cred_enc_part,
}
impl ::std::default::Default for _krb5_cred {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_cred = _krb5_cred;
#[repr(C)]
#[derive(Debug)]
pub struct _passwd_phrase_element {
    pub magic: krb5_magic,
    pub passwd: *mut krb5_data,
    pub phrase: *mut krb5_data,
}
impl ::std::default::Default for _passwd_phrase_element {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type passwd_phrase_element = _passwd_phrase_element;
#[repr(C)]
#[derive(Debug)]
pub struct _krb5_pwd_data {
    pub magic: krb5_magic,
    pub sequence_count: ::std::os::raw::c_int,
    pub element: *mut *mut passwd_phrase_element,
}
impl ::std::default::Default for _krb5_pwd_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_pwd_data = _krb5_pwd_data;
#[repr(C)]
#[derive(Debug)]
pub struct krb5_replay_data {
    pub timestamp: krb5_timestamp,
    pub usec: krb5_int32,
    pub seq: krb5_ui_4,
}
impl ::std::default::Default for krb5_replay_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_mk_req_checksum_func =
    ::std::option::Option<unsafe extern "C" fn(arg1: krb5_context,
                                               arg2: krb5_auth_context,
                                               arg3:
                                                   *mut ::std::os::raw::c_void,
                                               arg4: *mut *mut krb5_data)
                              -> krb5_error_code>;
pub type krb5_cc_cursor = krb5_pointer;
pub enum _krb5_ccache { }
pub type krb5_ccache = *mut _krb5_ccache;
pub enum _krb5_cc_ops { }
pub type krb5_cc_ops = _krb5_cc_ops;
pub enum _krb5_cccol_cursor { }
pub type krb5_cccol_cursor = *mut _krb5_cccol_cursor;
pub enum krb5_rc_st { }
pub type krb5_rcache = *mut krb5_rc_st;
pub type krb5_kt_cursor = krb5_pointer;
#[repr(C)]
#[derive(Debug)]
pub struct krb5_keytab_entry_st {
    pub magic: krb5_magic,
    pub principal: krb5_principal,
    pub timestamp: krb5_timestamp,
    pub vno: krb5_kvno,
    pub key: krb5_keyblock,
}
impl ::std::default::Default for krb5_keytab_entry_st {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_keytab_entry = krb5_keytab_entry_st;
pub enum _krb5_kt { }
pub type krb5_keytab = *mut _krb5_kt;
pub enum credentials { }
#[repr(C)]
#[derive(Debug)]
pub struct _krb5_prompt {
    pub prompt: *mut ::std::os::raw::c_char,
    pub hidden: ::std::os::raw::c_int,
    pub reply: *mut krb5_data,
}
impl ::std::default::Default for _krb5_prompt {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_prompt = _krb5_prompt;
pub type krb5_prompter_fct =
    ::std::option::Option<unsafe extern "C" fn(context: krb5_context,
                                               data:
                                                   *mut ::std::os::raw::c_void,
                                               name:
                                                   *const ::std::os::raw::c_char,
                                               banner:
                                                   *const ::std::os::raw::c_char,
                                               num_prompts:
                                                   ::std::os::raw::c_int,
                                               prompts: *mut krb5_prompt)
                              -> krb5_error_code>;
#[repr(C)]
#[derive(Debug)]
pub struct _krb5_get_init_creds_opt {
    pub flags: krb5_flags,
    pub tkt_life: krb5_deltat,
    pub renew_life: krb5_deltat,
    pub forwardable: ::std::os::raw::c_int,
    pub proxiable: ::std::os::raw::c_int,
    pub etype_list: *mut krb5_enctype,
    pub etype_list_length: ::std::os::raw::c_int,
    pub address_list: *mut *mut krb5_address,
    pub preauth_list: *mut krb5_preauthtype,
    pub preauth_list_length: ::std::os::raw::c_int,
    pub salt: *mut krb5_data,
}
impl ::std::default::Default for _krb5_get_init_creds_opt {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_get_init_creds_opt = _krb5_get_init_creds_opt;
#[repr(C)]
#[derive(Debug)]
pub struct _krb5_gic_opt_pa_data {
    pub attr: *mut ::std::os::raw::c_char,
    pub value: *mut ::std::os::raw::c_char,
}
impl ::std::default::Default for _krb5_gic_opt_pa_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_gic_opt_pa_data = _krb5_gic_opt_pa_data;
pub type krb5_gic_process_last_req =
    ::std::option::Option<unsafe extern "C" fn(arg1: krb5_context,
                                               arg2:
                                                   *mut *mut krb5_last_req_entry,
                                               arg3:
                                                   *mut ::std::os::raw::c_void)
                              -> krb5_error_code>;
#[repr(C)]
#[derive(Debug)]
pub struct _krb5_verify_init_creds_opt {
    pub flags: krb5_flags,
    pub ap_req_nofail: ::std::os::raw::c_int,
}
impl ::std::default::Default for _krb5_verify_init_creds_opt {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type krb5_verify_init_creds_opt = _krb5_verify_init_creds_opt;
pub type krb5_prompt_type = krb5_int32;
pub type errcode_t = ::std::os::raw::c_long;
pub type com_err_handler_t =
    ::std::option::Option<unsafe extern "C" fn(whoami:
                                                   *const ::std::os::raw::c_char,
                                               code: errcode_t,
                                               format:
                                                   *const ::std::os::raw::c_char,
                                               args: va_list)>;
#[repr(C)]
#[derive(Debug)]
pub struct error_table {
    pub messages: *const *const ::std::os::raw::c_char,
    pub base: u32,
    pub count: u32,
}
impl ::std::default::Default for error_table {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Debug)]
pub struct gss_krb5_lucid_key {
    pub type_: u32,
    pub length: u32,
    pub data: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for gss_krb5_lucid_key {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gss_krb5_lucid_key_t = gss_krb5_lucid_key;
#[repr(C)]
#[derive(Debug)]
pub struct gss_krb5_rfc1964_keydata {
    pub sign_alg: u32,
    pub seal_alg: u32,
    pub ctx_key: gss_krb5_lucid_key_t,
}
impl ::std::default::Default for gss_krb5_rfc1964_keydata {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gss_krb5_rfc1964_keydata_t = gss_krb5_rfc1964_keydata;
#[repr(C)]
#[derive(Debug)]
pub struct gss_krb5_cfx_keydata {
    pub have_acceptor_subkey: u32,
    pub ctx_key: gss_krb5_lucid_key_t,
    pub acceptor_subkey: gss_krb5_lucid_key_t,
}
impl ::std::default::Default for gss_krb5_cfx_keydata {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gss_krb5_cfx_keydata_t = gss_krb5_cfx_keydata;
#[repr(C)]
#[derive(Debug)]
pub struct gss_krb5_lucid_context_v1 {
    pub version: u32,
    pub initiate: u32,
    pub endtime: u32,
    pub send_seq: u64,
    pub recv_seq: u64,
    pub protocol: u32,
    pub rfc1964_kd: gss_krb5_rfc1964_keydata_t,
    pub cfx_kd: gss_krb5_cfx_keydata_t,
}
impl ::std::default::Default for gss_krb5_lucid_context_v1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gss_krb5_lucid_context_v1_t = gss_krb5_lucid_context_v1;
#[repr(C)]
#[derive(Debug)]
pub struct gss_krb5_lucid_context_version {
    pub version: u32,
}
impl ::std::default::Default for gss_krb5_lucid_context_version {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type gss_krb5_lucid_context_version_t = gss_krb5_lucid_context_version;
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for __va_list_tag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub static et_krb5_error_table: error_table;
    pub static et_kdb5_error_table: error_table;
    pub static et_kv5m_error_table: error_table;
    pub static et_k524_error_table: error_table;
    pub static et_asn1_error_table: error_table;
    pub static GSS_KRB5_NT_PRINCIPAL_NAME: gss_OID;
    pub static gss_mech_krb5: gss_OID;
    pub static gss_mech_krb5_old: gss_OID;
    pub static gss_mech_krb5_wrong: gss_OID;
    pub static gss_mech_iakerb: gss_OID;
    pub static gss_mech_set_krb5: gss_OID_set;
    pub static gss_mech_set_krb5_old: gss_OID_set;
    pub static gss_mech_set_krb5_both: gss_OID_set;
    pub static gss_nt_krb5_name: gss_OID;
    pub static gss_nt_krb5_principal: gss_OID;
    pub static mut krb5_gss_oid_array: [gss_OID_desc; 0usize];
    pub static GSS_KRB5_CRED_NO_CI_FLAGS_X: gss_OID;
}
extern "C" {
    pub fn krb5_is_referral_realm(arg1: *const krb5_data) -> krb5_boolean;
    pub fn krb5_c_encrypt(context: krb5_context, key: *const krb5_keyblock,
                          usage: krb5_keyusage,
                          cipher_state: *const krb5_data,
                          input: *const krb5_data, output: *mut krb5_enc_data)
     -> krb5_error_code;
    pub fn krb5_c_decrypt(context: krb5_context, key: *const krb5_keyblock,
                          usage: krb5_keyusage,
                          cipher_state: *const krb5_data,
                          input: *const krb5_enc_data, output: *mut krb5_data)
     -> krb5_error_code;
    pub fn krb5_c_encrypt_length(context: krb5_context, enctype: krb5_enctype,
                                 inputlen: usize, length: *mut usize)
     -> krb5_error_code;
    pub fn krb5_c_block_size(context: krb5_context, enctype: krb5_enctype,
                             blocksize: *mut usize) -> krb5_error_code;
    pub fn krb5_c_keylengths(context: krb5_context, enctype: krb5_enctype,
                             keybytes: *mut usize, keylength: *mut usize)
     -> krb5_error_code;
    pub fn krb5_c_init_state(context: krb5_context, key: *const krb5_keyblock,
                             usage: krb5_keyusage, new_state: *mut krb5_data)
     -> krb5_error_code;
    pub fn krb5_c_free_state(context: krb5_context, key: *const krb5_keyblock,
                             state: *mut krb5_data) -> krb5_error_code;
    pub fn krb5_c_prf(arg1: krb5_context, arg2: *const krb5_keyblock,
                      in_: *mut krb5_data, out: *mut krb5_data)
     -> krb5_error_code;
    pub fn krb5_c_prf_length(arg1: krb5_context, arg2: krb5_enctype,
                             outlen: *mut usize) -> krb5_error_code;
    pub fn krb5_c_make_random_key(context: krb5_context,
                                  enctype: krb5_enctype,
                                  k5_random_key: *mut krb5_keyblock)
     -> krb5_error_code;
    pub fn krb5_c_random_to_key(context: krb5_context, enctype: krb5_enctype,
                                random_data: *mut krb5_data,
                                k5_random_key: *mut krb5_keyblock)
     -> krb5_error_code;
    pub fn krb5_c_random_add_entropy(context: krb5_context,
                                     randsource_id: ::std::os::raw::c_uint,
                                     data: *const krb5_data)
     -> krb5_error_code;
    pub fn krb5_c_random_make_octets(context: krb5_context,
                                     data: *mut krb5_data) -> krb5_error_code;
    pub fn krb5_c_random_os_entropy(context: krb5_context,
                                    strong: ::std::os::raw::c_int,
                                    success: *mut ::std::os::raw::c_int)
     -> krb5_error_code;
    pub fn krb5_c_random_seed(context: krb5_context, data: *mut krb5_data)
     -> krb5_error_code;
    pub fn krb5_c_string_to_key(context: krb5_context, enctype: krb5_enctype,
                                string: *const krb5_data,
                                salt: *const krb5_data,
                                key: *mut krb5_keyblock) -> krb5_error_code;
    pub fn krb5_c_string_to_key_with_params(context: krb5_context,
                                            enctype: krb5_enctype,
                                            string: *const krb5_data,
                                            salt: *const krb5_data,
                                            params: *const krb5_data,
                                            key: *mut krb5_keyblock)
     -> krb5_error_code;
    pub fn krb5_c_enctype_compare(context: krb5_context, e1: krb5_enctype,
                                  e2: krb5_enctype,
                                  similar: *mut krb5_boolean)
     -> krb5_error_code;
    pub fn krb5_c_make_checksum(context: krb5_context,
                                cksumtype: krb5_cksumtype,
                                key: *const krb5_keyblock,
                                usage: krb5_keyusage, input: *const krb5_data,
                                cksum: *mut krb5_checksum) -> krb5_error_code;
    pub fn krb5_c_verify_checksum(context: krb5_context,
                                  key: *const krb5_keyblock,
                                  usage: krb5_keyusage,
                                  data: *const krb5_data,
                                  cksum: *const krb5_checksum,
                                  valid: *mut krb5_boolean)
     -> krb5_error_code;
    pub fn krb5_c_checksum_length(context: krb5_context,
                                  cksumtype: krb5_cksumtype,
                                  length: *mut usize) -> krb5_error_code;
    pub fn krb5_c_keyed_checksum_types(context: krb5_context,
                                       enctype: krb5_enctype,
                                       count: *mut ::std::os::raw::c_uint,
                                       cksumtypes: *mut *mut krb5_cksumtype)
     -> krb5_error_code;
    pub fn krb5_c_valid_enctype(ktype: krb5_enctype) -> krb5_boolean;
    pub fn krb5_c_valid_cksumtype(ctype: krb5_cksumtype) -> krb5_boolean;
    pub fn krb5_c_is_coll_proof_cksum(ctype: krb5_cksumtype) -> krb5_boolean;
    pub fn krb5_c_is_keyed_cksum(ctype: krb5_cksumtype) -> krb5_boolean;
    pub fn krb5_encrypt(context: krb5_context, inptr: krb5_const_pointer,
                        outptr: krb5_pointer, size: usize,
                        eblock: *mut krb5_encrypt_block, ivec: krb5_pointer)
     -> krb5_error_code;
    pub fn krb5_decrypt(context: krb5_context, inptr: krb5_const_pointer,
                        outptr: krb5_pointer, size: usize,
                        eblock: *mut krb5_encrypt_block, ivec: krb5_pointer)
     -> krb5_error_code;
    pub fn krb5_process_key(context: krb5_context,
                            eblock: *mut krb5_encrypt_block,
                            key: *const krb5_keyblock) -> krb5_error_code;
    pub fn krb5_finish_key(context: krb5_context,
                           eblock: *mut krb5_encrypt_block)
     -> krb5_error_code;
    pub fn krb5_string_to_key(context: krb5_context,
                              eblock: *const krb5_encrypt_block,
                              keyblock: *mut krb5_keyblock,
                              data: *const krb5_data, salt: *const krb5_data)
     -> krb5_error_code;
    pub fn krb5_init_random_key(context: krb5_context,
                                eblock: *const krb5_encrypt_block,
                                keyblock: *const krb5_keyblock,
                                ptr: *mut krb5_pointer) -> krb5_error_code;
    pub fn krb5_finish_random_key(context: krb5_context,
                                  eblock: *const krb5_encrypt_block,
                                  ptr: *mut krb5_pointer) -> krb5_error_code;
    pub fn krb5_random_key(context: krb5_context,
                           eblock: *const krb5_encrypt_block,
                           ptr: krb5_pointer,
                           keyblock: *mut *mut krb5_keyblock)
     -> krb5_error_code;
    pub fn krb5_eblock_enctype(context: krb5_context,
                               eblock: *const krb5_encrypt_block)
     -> krb5_enctype;
    pub fn krb5_use_enctype(context: krb5_context,
                            eblock: *mut krb5_encrypt_block,
                            enctype: krb5_enctype) -> krb5_error_code;
    pub fn krb5_encrypt_size(length: usize, crypto: krb5_enctype) -> usize;
    pub fn krb5_checksum_size(context: krb5_context, ctype: krb5_cksumtype)
     -> usize;
    pub fn krb5_calculate_checksum(context: krb5_context,
                                   ctype: krb5_cksumtype,
                                   in_: krb5_const_pointer, in_length: usize,
                                   seed: krb5_const_pointer,
                                   seed_length: usize,
                                   outcksum: *mut krb5_checksum)
     -> krb5_error_code;
    pub fn krb5_verify_checksum(context: krb5_context, ctype: krb5_cksumtype,
                                cksum: *const krb5_checksum,
                                in_: krb5_const_pointer, in_length: usize,
                                seed: krb5_const_pointer, seed_length: usize)
     -> krb5_error_code;
    pub fn krb5_cc_get_name(context: krb5_context, cache: krb5_ccache)
     -> *const ::std::os::raw::c_char;
    pub fn krb5_cc_gen_new(context: krb5_context, cache: *mut krb5_ccache)
     -> krb5_error_code;
    pub fn krb5_cc_initialize(context: krb5_context, cache: krb5_ccache,
                              principal: krb5_principal) -> krb5_error_code;
    pub fn krb5_cc_destroy(context: krb5_context, cache: krb5_ccache)
     -> krb5_error_code;
    pub fn krb5_cc_close(context: krb5_context, cache: krb5_ccache)
     -> krb5_error_code;
    pub fn krb5_cc_store_cred(context: krb5_context, cache: krb5_ccache,
                              creds: *mut krb5_creds) -> krb5_error_code;
    pub fn krb5_cc_retrieve_cred(context: krb5_context, cache: krb5_ccache,
                                 flags: krb5_flags, mcreds: *mut krb5_creds,
                                 creds: *mut krb5_creds) -> krb5_error_code;
    pub fn krb5_cc_get_principal(context: krb5_context, cache: krb5_ccache,
                                 principal: *mut krb5_principal)
     -> krb5_error_code;
    pub fn krb5_cc_start_seq_get(context: krb5_context, cache: krb5_ccache,
                                 cursor: *mut krb5_cc_cursor)
     -> krb5_error_code;
    pub fn krb5_cc_next_cred(context: krb5_context, cache: krb5_ccache,
                             cursor: *mut krb5_cc_cursor,
                             creds: *mut krb5_creds) -> krb5_error_code;
    pub fn krb5_cc_end_seq_get(context: krb5_context, cache: krb5_ccache,
                               cursor: *mut krb5_cc_cursor)
     -> krb5_error_code;
    pub fn krb5_cc_remove_cred(context: krb5_context, cache: krb5_ccache,
                               flags: krb5_flags, creds: *mut krb5_creds)
     -> krb5_error_code;
    pub fn krb5_cc_set_flags(context: krb5_context, cache: krb5_ccache,
                             flags: krb5_flags) -> krb5_error_code;
    pub fn krb5_cc_get_flags(context: krb5_context, cache: krb5_ccache,
                             flags: *mut krb5_flags) -> krb5_error_code;
    pub fn krb5_cc_get_type(context: krb5_context, cache: krb5_ccache)
     -> *const ::std::os::raw::c_char;
    pub fn krb5_cc_move(context: krb5_context, src: krb5_ccache,
                        dst: krb5_ccache) -> krb5_error_code;
    pub fn krb5_cc_last_change_time(context: krb5_context,
                                    ccache: krb5_ccache,
                                    change_time: *mut krb5_timestamp)
     -> krb5_error_code;
    pub fn krb5_cc_lock(context: krb5_context, ccache: krb5_ccache)
     -> krb5_error_code;
    pub fn krb5_cc_unlock(context: krb5_context, ccache: krb5_ccache)
     -> krb5_error_code;
    pub fn krb5_cc_cache_match(context: krb5_context, client: krb5_principal,
                               id: *mut krb5_ccache) -> krb5_error_code;
    pub fn krb5_cccol_cursor_new(context: krb5_context,
                                 cursor: *mut krb5_cccol_cursor)
     -> krb5_error_code;
    pub fn krb5_cccol_cursor_next(context: krb5_context,
                                  cursor: krb5_cccol_cursor,
                                  ccache: *mut krb5_ccache)
     -> krb5_error_code;
    pub fn krb5_cccol_cursor_free(context: krb5_context,
                                  cursor: *mut krb5_cccol_cursor)
     -> krb5_error_code;
    pub fn krb5_cccol_last_change_time(context: krb5_context,
                                       change_time: *mut krb5_timestamp)
     -> krb5_error_code;
    pub fn krb5_cccol_lock(context: krb5_context) -> krb5_error_code;
    pub fn krb5_cccol_unlock(context: krb5_context) -> krb5_error_code;
    pub fn krb5_cc_new_unique(context: krb5_context,
                              type_: *const ::std::os::raw::c_char,
                              hint: *const ::std::os::raw::c_char,
                              id: *mut krb5_ccache) -> krb5_error_code;
    pub fn krb5_kt_get_type(arg1: krb5_context, keytab: krb5_keytab)
     -> *const ::std::os::raw::c_char;
    pub fn krb5_kt_get_name(context: krb5_context, keytab: krb5_keytab,
                            name: *mut ::std::os::raw::c_char,
                            namelen: ::std::os::raw::c_uint)
     -> krb5_error_code;
    pub fn krb5_kt_close(context: krb5_context, keytab: krb5_keytab)
     -> krb5_error_code;
    pub fn krb5_kt_get_entry(context: krb5_context, keytab: krb5_keytab,
                             principal: krb5_const_principal, vno: krb5_kvno,
                             enctype: krb5_enctype,
                             entry: *mut krb5_keytab_entry)
     -> krb5_error_code;
    pub fn krb5_kt_start_seq_get(context: krb5_context, keytab: krb5_keytab,
                                 cursor: *mut krb5_kt_cursor)
     -> krb5_error_code;
    pub fn krb5_kt_next_entry(context: krb5_context, keytab: krb5_keytab,
                              entry: *mut krb5_keytab_entry,
                              cursor: *mut krb5_kt_cursor) -> krb5_error_code;
    pub fn krb5_kt_end_seq_get(context: krb5_context, keytab: krb5_keytab,
                               cursor: *mut krb5_kt_cursor)
     -> krb5_error_code;
    pub fn krb5_init_context(arg1: *mut krb5_context) -> krb5_error_code;
    pub fn krb5_init_secure_context(arg1: *mut krb5_context)
     -> krb5_error_code;
    pub fn krb5_free_context(arg1: krb5_context);
    pub fn krb5_copy_context(arg1: krb5_context, arg2: *mut krb5_context)
     -> krb5_error_code;
    pub fn krb5_set_default_tgs_enctypes(arg1: krb5_context,
                                         arg2: *const krb5_enctype)
     -> krb5_error_code;
    pub fn krb5_get_permitted_enctypes(arg1: krb5_context,
                                       arg2: *mut *mut krb5_enctype)
     -> krb5_error_code;
    pub fn krb5_is_thread_safe() -> krb5_boolean;
    pub fn krb5_server_decrypt_ticket_keytab(context: krb5_context,
                                             kt: krb5_keytab,
                                             ticket: *mut krb5_ticket)
     -> krb5_error_code;
    pub fn krb5_free_tgt_creds(arg1: krb5_context,
                               arg2: *mut *mut krb5_creds);
    pub fn krb5_get_credentials(arg1: krb5_context, arg2: krb5_flags,
                                arg3: krb5_ccache, arg4: *mut krb5_creds,
                                arg5: *mut *mut krb5_creds)
     -> krb5_error_code;
    pub fn krb5_get_credentials_validate(arg1: krb5_context, arg2: krb5_flags,
                                         arg3: krb5_ccache,
                                         arg4: *mut krb5_creds,
                                         arg5: *mut *mut krb5_creds)
     -> krb5_error_code;
    pub fn krb5_get_credentials_renew(arg1: krb5_context, arg2: krb5_flags,
                                      arg3: krb5_ccache,
                                      arg4: *mut krb5_creds,
                                      arg5: *mut *mut krb5_creds)
     -> krb5_error_code;
    pub fn krb5_mk_req(arg1: krb5_context, arg2: *mut krb5_auth_context,
                       arg3: krb5_flags, arg4: *mut ::std::os::raw::c_char,
                       arg5: *mut ::std::os::raw::c_char,
                       arg6: *mut krb5_data, arg7: krb5_ccache,
                       arg8: *mut krb5_data) -> krb5_error_code;
    pub fn krb5_mk_req_extended(arg1: krb5_context,
                                arg2: *mut krb5_auth_context,
                                arg3: krb5_flags, arg4: *mut krb5_data,
                                arg5: *mut krb5_creds, arg6: *mut krb5_data)
     -> krb5_error_code;
    pub fn krb5_mk_rep(arg1: krb5_context, arg2: krb5_auth_context,
                       arg3: *mut krb5_data) -> krb5_error_code;
    pub fn krb5_rd_rep(arg1: krb5_context, arg2: krb5_auth_context,
                       arg3: *const krb5_data,
                       arg4: *mut *mut krb5_ap_rep_enc_part)
     -> krb5_error_code;
    pub fn krb5_mk_error(arg1: krb5_context, arg2: *const krb5_error,
                         arg3: *mut krb5_data) -> krb5_error_code;
    pub fn krb5_rd_error(arg1: krb5_context, arg2: *const krb5_data,
                         arg3: *mut *mut krb5_error) -> krb5_error_code;
    pub fn krb5_rd_safe(arg1: krb5_context, arg2: krb5_auth_context,
                        arg3: *const krb5_data, arg4: *mut krb5_data,
                        arg5: *mut krb5_replay_data) -> krb5_error_code;
    pub fn krb5_rd_priv(arg1: krb5_context, arg2: krb5_auth_context,
                        arg3: *const krb5_data, arg4: *mut krb5_data,
                        arg5: *mut krb5_replay_data) -> krb5_error_code;
    pub fn krb5_parse_name(arg1: krb5_context,
                           arg2: *const ::std::os::raw::c_char,
                           arg3: *mut krb5_principal) -> krb5_error_code;
    pub fn krb5_parse_name_flags(arg1: krb5_context,
                                 arg2: *const ::std::os::raw::c_char,
                                 arg3: ::std::os::raw::c_int,
                                 arg4: *mut krb5_principal)
     -> krb5_error_code;
    pub fn krb5_unparse_name(arg1: krb5_context, arg2: krb5_const_principal,
                             arg3: *mut *mut ::std::os::raw::c_char)
     -> krb5_error_code;
    pub fn krb5_unparse_name_ext(arg1: krb5_context,
                                 arg2: krb5_const_principal,
                                 arg3: *mut *mut ::std::os::raw::c_char,
                                 arg4: *mut ::std::os::raw::c_uint)
     -> krb5_error_code;
    pub fn krb5_unparse_name_flags(arg1: krb5_context,
                                   arg2: krb5_const_principal,
                                   arg3: ::std::os::raw::c_int,
                                   arg4: *mut *mut ::std::os::raw::c_char)
     -> krb5_error_code;
    pub fn krb5_unparse_name_flags_ext(arg1: krb5_context,
                                       arg2: krb5_const_principal,
                                       arg3: ::std::os::raw::c_int,
                                       arg4: *mut *mut ::std::os::raw::c_char,
                                       arg5: *mut ::std::os::raw::c_uint)
     -> krb5_error_code;
    pub fn krb5_set_principal_realm(arg1: krb5_context, arg2: krb5_principal,
                                    arg3: *const ::std::os::raw::c_char)
     -> krb5_error_code;
    pub fn krb5_address_search(arg1: krb5_context, arg2: *const krb5_address,
                               arg3: *const *mut krb5_address)
     -> krb5_boolean;
    pub fn krb5_address_compare(arg1: krb5_context, arg2: *const krb5_address,
                                arg3: *const krb5_address) -> krb5_boolean;
    pub fn krb5_address_order(arg1: krb5_context, arg2: *const krb5_address,
                              arg3: *const krb5_address)
     -> ::std::os::raw::c_int;
    pub fn krb5_realm_compare(arg1: krb5_context, arg2: krb5_const_principal,
                              arg3: krb5_const_principal) -> krb5_boolean;
    pub fn krb5_principal_compare(arg1: krb5_context,
                                  arg2: krb5_const_principal,
                                  arg3: krb5_const_principal) -> krb5_boolean;
    pub fn krb5_init_keyblock(arg1: krb5_context, enctype: krb5_enctype,
                              length: usize, out: *mut *mut krb5_keyblock)
     -> krb5_error_code;
    pub fn krb5_copy_keyblock(arg1: krb5_context, arg2: *const krb5_keyblock,
                              arg3: *mut *mut krb5_keyblock)
     -> krb5_error_code;
    pub fn krb5_copy_keyblock_contents(arg1: krb5_context,
                                       arg2: *const krb5_keyblock,
                                       arg3: *mut krb5_keyblock)
     -> krb5_error_code;
    pub fn krb5_copy_creds(arg1: krb5_context, arg2: *const krb5_creds,
                           arg3: *mut *mut krb5_creds) -> krb5_error_code;
    pub fn krb5_copy_data(arg1: krb5_context, arg2: *const krb5_data,
                          arg3: *mut *mut krb5_data) -> krb5_error_code;
    pub fn krb5_copy_principal(arg1: krb5_context, arg2: krb5_const_principal,
                               arg3: *mut krb5_principal) -> krb5_error_code;
    pub fn krb5_copy_addresses(arg1: krb5_context,
                               arg2: *const *mut krb5_address,
                               arg3: *mut *mut *mut krb5_address)
     -> krb5_error_code;
    pub fn krb5_copy_ticket(arg1: krb5_context, arg2: *const krb5_ticket,
                            arg3: *mut *mut krb5_ticket) -> krb5_error_code;
    pub fn krb5_copy_authdata(arg1: krb5_context,
                              arg2: *const *mut krb5_authdata,
                              arg3: *mut *mut *mut krb5_authdata)
     -> krb5_error_code;
    pub fn krb5_copy_authenticator(arg1: krb5_context,
                                   arg2: *const krb5_authenticator,
                                   arg3: *mut *mut krb5_authenticator)
     -> krb5_error_code;
    pub fn krb5_copy_checksum(arg1: krb5_context, arg2: *const krb5_checksum,
                              arg3: *mut *mut krb5_checksum)
     -> krb5_error_code;
    pub fn krb5_get_server_rcache(arg1: krb5_context, arg2: *const krb5_data,
                                  arg3: *mut krb5_rcache) -> krb5_error_code;
    pub fn krb5_build_principal_ext(arg1: krb5_context,
                                    arg2: *mut krb5_principal,
                                    arg3: ::std::os::raw::c_uint,
                                    arg4: *const ::std::os::raw::c_char, ...)
     -> krb5_error_code;
    pub fn krb5_build_principal(arg1: krb5_context, arg2: *mut krb5_principal,
                                arg3: ::std::os::raw::c_uint,
                                arg4: *const ::std::os::raw::c_char, ...)
     -> krb5_error_code;
    pub fn krb5_build_principal_alloc_va(arg1: krb5_context,
                                         arg2: *mut krb5_principal,
                                         arg3: ::std::os::raw::c_uint,
                                         arg4: *const ::std::os::raw::c_char,
                                         arg5: va_list) -> krb5_error_code;
    pub fn krb5_425_conv_principal(arg1: krb5_context,
                                   name: *const ::std::os::raw::c_char,
                                   instance: *const ::std::os::raw::c_char,
                                   realm: *const ::std::os::raw::c_char,
                                   princ: *mut krb5_principal)
     -> krb5_error_code;
    pub fn krb5_524_conv_principal(context: krb5_context,
                                   princ: krb5_const_principal,
                                   name: *mut ::std::os::raw::c_char,
                                   inst: *mut ::std::os::raw::c_char,
                                   realm: *mut ::std::os::raw::c_char)
     -> krb5_error_code;
    pub fn krb5_524_convert_creds(context: krb5_context,
                                  v5creds: *mut krb5_creds,
                                  v4creds: *mut credentials)
     -> ::std::os::raw::c_int;
    pub fn krb5_kt_resolve(arg1: krb5_context,
                           arg2: *const ::std::os::raw::c_char,
                           arg3: *mut krb5_keytab) -> krb5_error_code;
    pub fn krb5_kt_default_name(arg1: krb5_context,
                                arg2: *mut ::std::os::raw::c_char,
                                arg3: ::std::os::raw::c_int)
     -> krb5_error_code;
    pub fn krb5_kt_default(arg1: krb5_context, arg2: *mut krb5_keytab)
     -> krb5_error_code;
    pub fn krb5_free_keytab_entry_contents(arg1: krb5_context,
                                           arg2: *mut krb5_keytab_entry)
     -> krb5_error_code;
    pub fn krb5_kt_remove_entry(arg1: krb5_context, arg2: krb5_keytab,
                                arg3: *mut krb5_keytab_entry)
     -> krb5_error_code;
    pub fn krb5_kt_add_entry(arg1: krb5_context, arg2: krb5_keytab,
                             arg3: *mut krb5_keytab_entry) -> krb5_error_code;
    pub fn krb5_principal2salt(arg1: krb5_context, arg2: krb5_const_principal,
                               arg3: *mut krb5_data) -> krb5_error_code;
    pub fn krb5_cc_resolve(arg1: krb5_context,
                           arg2: *const ::std::os::raw::c_char,
                           arg3: *mut krb5_ccache) -> krb5_error_code;
    pub fn krb5_cc_default_name(arg1: krb5_context)
     -> *const ::std::os::raw::c_char;
    pub fn krb5_cc_set_default_name(arg1: krb5_context,
                                    arg2: *const ::std::os::raw::c_char)
     -> krb5_error_code;
    pub fn krb5_cc_default(arg1: krb5_context, arg2: *mut krb5_ccache)
     -> krb5_error_code;
    pub fn krb5_cc_copy_creds(context: krb5_context, incc: krb5_ccache,
                              outcc: krb5_ccache) -> krb5_error_code;
    pub fn krb5_cc_get_config(arg1: krb5_context, arg2: krb5_ccache,
                              arg3: krb5_const_principal,
                              arg4: *const ::std::os::raw::c_char,
                              arg5: *mut krb5_data) -> krb5_error_code;
    pub fn krb5_cc_set_config(arg1: krb5_context, arg2: krb5_ccache,
                              arg3: krb5_const_principal,
                              arg4: *const ::std::os::raw::c_char,
                              arg5: *mut krb5_data) -> krb5_error_code;
    pub fn krb5_is_config_principal(arg1: krb5_context,
                                    arg2: krb5_const_principal)
     -> krb5_boolean;
    pub fn krb5_free_principal(arg1: krb5_context, arg2: krb5_principal);
    pub fn krb5_free_authenticator(arg1: krb5_context,
                                   arg2: *mut krb5_authenticator);
    pub fn krb5_free_addresses(arg1: krb5_context,
                               arg2: *mut *mut krb5_address);
    pub fn krb5_free_authdata(arg1: krb5_context,
                              arg2: *mut *mut krb5_authdata);
    pub fn krb5_free_ticket(arg1: krb5_context, arg2: *mut krb5_ticket);
    pub fn krb5_free_error(arg1: krb5_context, arg2: *mut krb5_error);
    pub fn krb5_free_creds(arg1: krb5_context, arg2: *mut krb5_creds);
    pub fn krb5_free_cred_contents(arg1: krb5_context, arg2: *mut krb5_creds);
    pub fn krb5_free_checksum(arg1: krb5_context, arg2: *mut krb5_checksum);
    pub fn krb5_free_checksum_contents(arg1: krb5_context,
                                       arg2: *mut krb5_checksum);
    pub fn krb5_free_keyblock(arg1: krb5_context, arg2: *mut krb5_keyblock);
    pub fn krb5_free_keyblock_contents(arg1: krb5_context,
                                       arg2: *mut krb5_keyblock);
    pub fn krb5_free_ap_rep_enc_part(arg1: krb5_context,
                                     arg2: *mut krb5_ap_rep_enc_part);
    pub fn krb5_free_data(arg1: krb5_context, arg2: *mut krb5_data);
    pub fn krb5_free_data_contents(arg1: krb5_context, arg2: *mut krb5_data);
    pub fn krb5_free_unparsed_name(arg1: krb5_context,
                                   arg2: *mut ::std::os::raw::c_char);
    pub fn krb5_free_cksumtypes(arg1: krb5_context,
                                arg2: *mut krb5_cksumtype);
    pub fn krb5_us_timeofday(arg1: krb5_context, arg2: *mut krb5_timestamp,
                             arg3: *mut krb5_int32) -> krb5_error_code;
    pub fn krb5_timeofday(arg1: krb5_context, arg2: *mut krb5_timestamp)
     -> krb5_error_code;
    pub fn krb5_os_localaddr(arg1: krb5_context,
                             arg2: *mut *mut *mut krb5_address)
     -> krb5_error_code;
    pub fn krb5_get_default_realm(arg1: krb5_context,
                                  arg2: *mut *mut ::std::os::raw::c_char)
     -> krb5_error_code;
    pub fn krb5_set_default_realm(arg1: krb5_context,
                                  arg2: *const ::std::os::raw::c_char)
     -> krb5_error_code;
    pub fn krb5_free_default_realm(arg1: krb5_context,
                                   arg2: *mut ::std::os::raw::c_char);
    pub fn krb5_sname_to_principal(arg1: krb5_context,
                                   arg2: *const ::std::os::raw::c_char,
                                   arg3: *const ::std::os::raw::c_char,
                                   arg4: krb5_int32,
                                   arg5: *mut krb5_principal)
     -> krb5_error_code;
    pub fn krb5_change_password(context: krb5_context, creds: *mut krb5_creds,
                                newpw: *mut ::std::os::raw::c_char,
                                result_code: *mut ::std::os::raw::c_int,
                                result_code_string: *mut krb5_data,
                                result_string: *mut krb5_data)
     -> krb5_error_code;
    pub fn krb5_set_password(context: krb5_context, creds: *mut krb5_creds,
                             newpw: *mut ::std::os::raw::c_char,
                             change_password_for: krb5_principal,
                             result_code: *mut ::std::os::raw::c_int,
                             result_code_string: *mut krb5_data,
                             result_string: *mut krb5_data)
     -> krb5_error_code;
    pub fn krb5_set_password_using_ccache(context: krb5_context,
                                          ccache: krb5_ccache,
                                          newpw: *mut ::std::os::raw::c_char,
                                          change_password_for: krb5_principal,
                                          result_code:
                                              *mut ::std::os::raw::c_int,
                                          result_code_string: *mut krb5_data,
                                          result_string: *mut krb5_data)
     -> krb5_error_code;
    pub fn krb5_get_profile(arg1: krb5_context, arg2: *mut *mut _profile_t)
     -> krb5_error_code;
    pub fn krb5_rd_req(arg1: krb5_context, arg2: *mut krb5_auth_context,
                       arg3: *const krb5_data, arg4: krb5_const_principal,
                       arg5: krb5_keytab, arg6: *mut krb5_flags,
                       arg7: *mut *mut krb5_ticket) -> krb5_error_code;
    pub fn krb5_kt_read_service_key(arg1: krb5_context, arg2: krb5_pointer,
                                    arg3: krb5_principal, arg4: krb5_kvno,
                                    arg5: krb5_enctype,
                                    arg6: *mut *mut krb5_keyblock)
     -> krb5_error_code;
    pub fn krb5_mk_safe(arg1: krb5_context, arg2: krb5_auth_context,
                        arg3: *const krb5_data, arg4: *mut krb5_data,
                        arg5: *mut krb5_replay_data) -> krb5_error_code;
    pub fn krb5_mk_priv(arg1: krb5_context, arg2: krb5_auth_context,
                        arg3: *const krb5_data, arg4: *mut krb5_data,
                        arg5: *mut krb5_replay_data) -> krb5_error_code;
    pub fn krb5_sendauth(arg1: krb5_context, arg2: *mut krb5_auth_context,
                         arg3: krb5_pointer,
                         arg4: *mut ::std::os::raw::c_char,
                         arg5: krb5_principal, arg6: krb5_principal,
                         arg7: krb5_flags, arg8: *mut krb5_data,
                         arg9: *mut krb5_creds, arg10: krb5_ccache,
                         arg11: *mut *mut krb5_error,
                         arg12: *mut *mut krb5_ap_rep_enc_part,
                         arg13: *mut *mut krb5_creds) -> krb5_error_code;
    pub fn krb5_recvauth(arg1: krb5_context, arg2: *mut krb5_auth_context,
                         arg3: krb5_pointer,
                         arg4: *mut ::std::os::raw::c_char,
                         arg5: krb5_principal, arg6: krb5_int32,
                         arg7: krb5_keytab, arg8: *mut *mut krb5_ticket)
     -> krb5_error_code;
    pub fn krb5_recvauth_version(arg1: krb5_context,
                                 arg2: *mut krb5_auth_context,
                                 arg3: krb5_pointer, arg4: krb5_principal,
                                 arg5: krb5_int32, arg6: krb5_keytab,
                                 arg7: *mut *mut krb5_ticket,
                                 arg8: *mut krb5_data) -> krb5_error_code;
    pub fn krb5_mk_ncred(arg1: krb5_context, arg2: krb5_auth_context,
                         arg3: *mut *mut krb5_creds,
                         arg4: *mut *mut krb5_data,
                         arg5: *mut krb5_replay_data) -> krb5_error_code;
    pub fn krb5_mk_1cred(arg1: krb5_context, arg2: krb5_auth_context,
                         arg3: *mut krb5_creds, arg4: *mut *mut krb5_data,
                         arg5: *mut krb5_replay_data) -> krb5_error_code;
    pub fn krb5_rd_cred(arg1: krb5_context, arg2: krb5_auth_context,
                        arg3: *mut krb5_data, arg4: *mut *mut *mut krb5_creds,
                        arg5: *mut krb5_replay_data) -> krb5_error_code;
    pub fn krb5_fwd_tgt_creds(arg1: krb5_context, arg2: krb5_auth_context,
                              arg3: *mut ::std::os::raw::c_char,
                              arg4: krb5_principal, arg5: krb5_principal,
                              arg6: krb5_ccache,
                              forwardable: ::std::os::raw::c_int,
                              arg7: *mut krb5_data) -> krb5_error_code;
    pub fn krb5_auth_con_init(arg1: krb5_context,
                              arg2: *mut krb5_auth_context)
     -> krb5_error_code;
    pub fn krb5_auth_con_free(arg1: krb5_context, arg2: krb5_auth_context)
     -> krb5_error_code;
    pub fn krb5_auth_con_setflags(arg1: krb5_context, arg2: krb5_auth_context,
                                  arg3: krb5_int32) -> krb5_error_code;
    pub fn krb5_auth_con_getflags(arg1: krb5_context, arg2: krb5_auth_context,
                                  arg3: *mut krb5_int32) -> krb5_error_code;
    pub fn krb5_auth_con_set_checksum_func(arg1: krb5_context,
                                           arg2: krb5_auth_context,
                                           arg3: krb5_mk_req_checksum_func,
                                           arg4: *mut ::std::os::raw::c_void)
     -> krb5_error_code;
    pub fn krb5_auth_con_get_checksum_func(arg1: krb5_context,
                                           arg2: krb5_auth_context,
                                           arg3:
                                               *mut krb5_mk_req_checksum_func,
                                           arg4:
                                               *mut *mut ::std::os::raw::c_void)
     -> krb5_error_code;
    pub fn krb5_auth_con_setaddrs(arg1: krb5_context, arg2: krb5_auth_context,
                                  arg3: *mut krb5_address,
                                  arg4: *mut krb5_address) -> krb5_error_code;
    pub fn krb5_auth_con_getaddrs(arg1: krb5_context, arg2: krb5_auth_context,
                                  arg3: *mut *mut krb5_address,
                                  arg4: *mut *mut krb5_address)
     -> krb5_error_code;
    pub fn krb5_auth_con_setports(arg1: krb5_context, arg2: krb5_auth_context,
                                  arg3: *mut krb5_address,
                                  arg4: *mut krb5_address) -> krb5_error_code;
    pub fn krb5_auth_con_setuseruserkey(arg1: krb5_context,
                                        arg2: krb5_auth_context,
                                        arg3: *mut krb5_keyblock)
     -> krb5_error_code;
    pub fn krb5_auth_con_getkey(arg1: krb5_context, arg2: krb5_auth_context,
                                arg3: *mut *mut krb5_keyblock)
     -> krb5_error_code;
    pub fn krb5_auth_con_getsendsubkey(arg1: krb5_context,
                                       arg2: krb5_auth_context,
                                       arg3: *mut *mut krb5_keyblock)
     -> krb5_error_code;
    pub fn krb5_auth_con_getrecvsubkey(arg1: krb5_context,
                                       arg2: krb5_auth_context,
                                       arg3: *mut *mut krb5_keyblock)
     -> krb5_error_code;
    pub fn krb5_auth_con_setsendsubkey(arg1: krb5_context,
                                       arg2: krb5_auth_context,
                                       arg3: *mut krb5_keyblock)
     -> krb5_error_code;
    pub fn krb5_auth_con_setrecvsubkey(arg1: krb5_context,
                                       arg2: krb5_auth_context,
                                       arg3: *mut krb5_keyblock)
     -> krb5_error_code;
    pub fn krb5_auth_con_getlocalseqnumber(arg1: krb5_context,
                                           arg2: krb5_auth_context,
                                           arg3: *mut krb5_int32)
     -> krb5_error_code;
    pub fn krb5_auth_con_getremoteseqnumber(arg1: krb5_context,
                                            arg2: krb5_auth_context,
                                            arg3: *mut krb5_int32)
     -> krb5_error_code;
    pub fn krb5_auth_con_setrcache(arg1: krb5_context,
                                   arg2: krb5_auth_context, arg3: krb5_rcache)
     -> krb5_error_code;
    pub fn krb5_auth_con_getrcache(arg1: krb5_context,
                                   arg2: krb5_auth_context,
                                   arg3: *mut krb5_rcache) -> krb5_error_code;
    pub fn krb5_auth_con_getauthenticator(arg1: krb5_context,
                                          arg2: krb5_auth_context,
                                          arg3: *mut *mut krb5_authenticator)
     -> krb5_error_code;
    pub fn krb5_read_password(arg1: krb5_context,
                              arg2: *const ::std::os::raw::c_char,
                              arg3: *const ::std::os::raw::c_char,
                              arg4: *mut ::std::os::raw::c_char,
                              arg5: *mut ::std::os::raw::c_uint)
     -> krb5_error_code;
    pub fn krb5_aname_to_localname(arg1: krb5_context,
                                   arg2: krb5_const_principal,
                                   arg3: ::std::os::raw::c_int,
                                   arg4: *mut ::std::os::raw::c_char)
     -> krb5_error_code;
    pub fn krb5_get_host_realm(arg1: krb5_context,
                               arg2: *const ::std::os::raw::c_char,
                               arg3: *mut *mut *mut ::std::os::raw::c_char)
     -> krb5_error_code;
    pub fn krb5_get_fallback_host_realm(arg1: krb5_context,
                                        arg2: *mut krb5_data,
                                        arg3:
                                            *mut *mut *mut ::std::os::raw::c_char)
     -> krb5_error_code;
    pub fn krb5_free_host_realm(arg1: krb5_context,
                                arg2: *const *mut ::std::os::raw::c_char)
     -> krb5_error_code;
    pub fn krb5_kuserok(arg1: krb5_context, arg2: krb5_principal,
                        arg3: *const ::std::os::raw::c_char) -> krb5_boolean;
    pub fn krb5_auth_con_genaddrs(arg1: krb5_context, arg2: krb5_auth_context,
                                  arg3: ::std::os::raw::c_int,
                                  arg4: ::std::os::raw::c_int)
     -> krb5_error_code;
    pub fn krb5_set_real_time(arg1: krb5_context, arg2: krb5_timestamp,
                              arg3: krb5_int32) -> krb5_error_code;
    pub fn krb5_get_time_offsets(arg1: krb5_context,
                                 arg2: *mut krb5_timestamp,
                                 arg3: *mut krb5_int32) -> krb5_error_code;
    pub fn krb5_string_to_enctype(arg1: *mut ::std::os::raw::c_char,
                                  arg2: *mut krb5_enctype) -> krb5_error_code;
    pub fn krb5_string_to_salttype(arg1: *mut ::std::os::raw::c_char,
                                   arg2: *mut krb5_int32) -> krb5_error_code;
    pub fn krb5_string_to_cksumtype(arg1: *mut ::std::os::raw::c_char,
                                    arg2: *mut krb5_cksumtype)
     -> krb5_error_code;
    pub fn krb5_string_to_timestamp(arg1: *mut ::std::os::raw::c_char,
                                    arg2: *mut krb5_timestamp)
     -> krb5_error_code;
    pub fn krb5_string_to_deltat(arg1: *mut ::std::os::raw::c_char,
                                 arg2: *mut krb5_deltat) -> krb5_error_code;
    pub fn krb5_enctype_to_string(arg1: krb5_enctype,
                                  arg2: *mut ::std::os::raw::c_char,
                                  arg3: usize) -> krb5_error_code;
    pub fn krb5_salttype_to_string(arg1: krb5_int32,
                                   arg2: *mut ::std::os::raw::c_char,
                                   arg3: usize) -> krb5_error_code;
    pub fn krb5_cksumtype_to_string(arg1: krb5_cksumtype,
                                    arg2: *mut ::std::os::raw::c_char,
                                    arg3: usize) -> krb5_error_code;
    pub fn krb5_timestamp_to_string(arg1: krb5_timestamp,
                                    arg2: *mut ::std::os::raw::c_char,
                                    arg3: usize) -> krb5_error_code;
    pub fn krb5_timestamp_to_sfstring(arg1: krb5_timestamp,
                                      arg2: *mut ::std::os::raw::c_char,
                                      arg3: usize,
                                      arg4: *mut ::std::os::raw::c_char)
     -> krb5_error_code;
    pub fn krb5_deltat_to_string(arg1: krb5_deltat,
                                 arg2: *mut ::std::os::raw::c_char,
                                 arg3: usize) -> krb5_error_code;
    pub fn krb5_prompter_posix(context: krb5_context,
                               data: *mut ::std::os::raw::c_void,
                               name: *const ::std::os::raw::c_char,
                               banner: *const ::std::os::raw::c_char,
                               num_prompts: ::std::os::raw::c_int,
                               prompts: *mut krb5_prompt) -> krb5_error_code;
    pub fn krb5_get_init_creds_opt_alloc(context: krb5_context,
                                         opt:
                                             *mut *mut krb5_get_init_creds_opt)
     -> krb5_error_code;
    pub fn krb5_get_init_creds_opt_free(context: krb5_context,
                                        opt: *mut krb5_get_init_creds_opt);
    pub fn krb5_get_init_creds_opt_init(opt: *mut krb5_get_init_creds_opt);
    pub fn krb5_get_init_creds_opt_set_tkt_life(opt:
                                                    *mut krb5_get_init_creds_opt,
                                                tkt_life: krb5_deltat);
    pub fn krb5_get_init_creds_opt_set_renew_life(opt:
                                                      *mut krb5_get_init_creds_opt,
                                                  renew_life: krb5_deltat);
    pub fn krb5_get_init_creds_opt_set_forwardable(opt:
                                                       *mut krb5_get_init_creds_opt,
                                                   forwardable:
                                                       ::std::os::raw::c_int);
    pub fn krb5_get_init_creds_opt_set_proxiable(opt:
                                                     *mut krb5_get_init_creds_opt,
                                                 proxiable:
                                                     ::std::os::raw::c_int);
    pub fn krb5_get_init_creds_opt_set_canonicalize(opt:
                                                        *mut krb5_get_init_creds_opt,
                                                    canonicalize:
                                                        ::std::os::raw::c_int);
    pub fn krb5_get_init_creds_opt_set_etype_list(opt:
                                                      *mut krb5_get_init_creds_opt,
                                                  etype_list:
                                                      *mut krb5_enctype,
                                                  etype_list_length:
                                                      ::std::os::raw::c_int);
    pub fn krb5_get_init_creds_opt_set_address_list(opt:
                                                        *mut krb5_get_init_creds_opt,
                                                    addresses:
                                                        *mut *mut krb5_address);
    pub fn krb5_get_init_creds_opt_set_preauth_list(opt:
                                                        *mut krb5_get_init_creds_opt,
                                                    preauth_list:
                                                        *mut krb5_preauthtype,
                                                    preauth_list_length:
                                                        ::std::os::raw::c_int);
    pub fn krb5_get_init_creds_opt_set_salt(opt: *mut krb5_get_init_creds_opt,
                                            salt: *mut krb5_data);
    pub fn krb5_get_init_creds_opt_set_change_password_prompt(opt:
                                                                  *mut krb5_get_init_creds_opt,
                                                              prompt:
                                                                  ::std::os::raw::c_int);
    pub fn krb5_get_init_creds_opt_set_pa(context: krb5_context,
                                          opt: *mut krb5_get_init_creds_opt,
                                          attr: *const ::std::os::raw::c_char,
                                          value:
                                              *const ::std::os::raw::c_char)
     -> krb5_error_code;
    pub fn krb5_get_init_creds_opt_set_process_last_req(arg1: krb5_context,
                                                        arg2:
                                                            *mut krb5_get_init_creds_opt,
                                                        arg3:
                                                            krb5_gic_process_last_req,
                                                        arg4:
                                                            *mut ::std::os::raw::c_void)
     -> krb5_error_code;
    pub fn krb5_get_init_creds_password(context: krb5_context,
                                        creds: *mut krb5_creds,
                                        client: krb5_principal,
                                        password: *mut ::std::os::raw::c_char,
                                        prompter: krb5_prompter_fct,
                                        data: *mut ::std::os::raw::c_void,
                                        start_time: krb5_deltat,
                                        in_tkt_service:
                                            *mut ::std::os::raw::c_char,
                                        k5_gic_options:
                                            *mut krb5_get_init_creds_opt)
     -> krb5_error_code;
    pub fn krb5_get_init_creds_keytab(context: krb5_context,
                                      creds: *mut krb5_creds,
                                      client: krb5_principal,
                                      arg_keytab: krb5_keytab,
                                      start_time: krb5_deltat,
                                      in_tkt_service:
                                          *mut ::std::os::raw::c_char,
                                      k5_gic_options:
                                          *mut krb5_get_init_creds_opt)
     -> krb5_error_code;
    pub fn krb5_verify_init_creds_opt_init(k5_vic_options:
                                               *mut krb5_verify_init_creds_opt);
    pub fn krb5_verify_init_creds_opt_set_ap_req_nofail(k5_vic_options:
                                                            *mut krb5_verify_init_creds_opt,
                                                        ap_req_nofail:
                                                            ::std::os::raw::c_int);
    pub fn krb5_verify_init_creds(context: krb5_context,
                                  creds: *mut krb5_creds,
                                  ap_req_server: krb5_principal,
                                  ap_req_keytab: krb5_keytab,
                                  ccache: *mut krb5_ccache,
                                  k5_vic_options:
                                      *mut krb5_verify_init_creds_opt)
     -> krb5_error_code;
    pub fn krb5_get_validated_creds(context: krb5_context,
                                    creds: *mut krb5_creds,
                                    client: krb5_principal,
                                    ccache: krb5_ccache,
                                    in_tkt_service:
                                        *mut ::std::os::raw::c_char)
     -> krb5_error_code;
    pub fn krb5_get_renewed_creds(context: krb5_context,
                                  creds: *mut krb5_creds,
                                  client: krb5_principal, ccache: krb5_ccache,
                                  in_tkt_service: *mut ::std::os::raw::c_char)
     -> krb5_error_code;
    pub fn krb5_decode_ticket(code: *const krb5_data,
                              rep: *mut *mut krb5_ticket) -> krb5_error_code;
    pub fn krb5_appdefault_string(context: krb5_context,
                                  appname: *const ::std::os::raw::c_char,
                                  realm: *const krb5_data,
                                  option: *const ::std::os::raw::c_char,
                                  default_value:
                                      *const ::std::os::raw::c_char,
                                  ret_value:
                                      *mut *mut ::std::os::raw::c_char);
    pub fn krb5_appdefault_boolean(context: krb5_context,
                                   appname: *const ::std::os::raw::c_char,
                                   realm: *const krb5_data,
                                   option: *const ::std::os::raw::c_char,
                                   default_value: ::std::os::raw::c_int,
                                   ret_value: *mut ::std::os::raw::c_int);
    pub fn krb5_get_prompt_types(context: krb5_context)
     -> *mut krb5_prompt_type;
    pub fn krb5_set_error_message(arg1: krb5_context, arg2: krb5_error_code,
                                  arg3: *const ::std::os::raw::c_char, ...);
    pub fn krb5_vset_error_message(arg1: krb5_context, arg2: krb5_error_code,
                                   arg3: *const ::std::os::raw::c_char,
                                   arg4: va_list);
    pub fn krb5_get_error_message(arg1: krb5_context, arg2: krb5_error_code)
     -> *const ::std::os::raw::c_char;
    pub fn krb5_free_error_message(arg1: krb5_context,
                                   arg2: *const ::std::os::raw::c_char);
    pub fn krb5_clear_error_message(arg1: krb5_context);
    pub fn com_err(progname: *const ::std::os::raw::c_char, code: errcode_t,
                   format: *const ::std::os::raw::c_char, ...);
    pub fn com_err_va(progname: *const ::std::os::raw::c_char,
                      code: errcode_t, format: *const ::std::os::raw::c_char,
                      args: va_list);
    pub fn error_message(code: errcode_t) -> *const ::std::os::raw::c_char;
    pub fn error_manager(code: errcode_t) -> *const ::std::os::raw::c_char;
    pub fn set_com_err_hook(handler: com_err_handler_t) -> com_err_handler_t;
    pub fn reset_com_err_hook() -> com_err_handler_t;
    pub fn add_error_table(et: *const error_table) -> errcode_t;
    pub fn remove_error_table(et: *const error_table) -> errcode_t;
    pub fn initialize_krb5_error_table();
    pub fn initialize_kdb5_error_table();
    pub fn initialize_kv5m_error_table();
    pub fn initialize_k524_error_table();
    pub fn initialize_asn1_error_table();
    pub fn krb5_gss_register_acceptor_identity(arg1:
                                                   *const ::std::os::raw::c_char)
     -> u32;
    pub fn gss_krb5_get_tkt_flags(minor_status: *mut u32,
                                  context_handle: gss_ctx_id_t,
                                  ticket_flags: *mut krb5_flags) -> u32;
    pub fn gss_krb5_copy_ccache(minor_status: *mut u32,
                                cred_handle: gss_cred_id_t,
                                out_ccache: krb5_ccache) -> u32;
    pub fn gss_krb5_ccache_name(minor_status: *mut u32,
                                name: *const ::std::os::raw::c_char,
                                out_name: *mut *const ::std::os::raw::c_char)
     -> u32;
    pub fn gss_krb5_set_allowable_enctypes(minor_status: *mut u32,
                                           cred: gss_cred_id_t,
                                           num_ktypes: u32,
                                           ktypes: *mut krb5_enctype)
     -> u32;
    pub fn gss_krb5_export_lucid_sec_context(minor_status: *mut u32,
                                             context_handle:
                                                 *mut gss_ctx_id_t,
                                             version: u32,
                                             kctx:
                                                 *mut *mut ::std::os::raw::c_void)
     -> u32;
    pub fn gss_krb5_free_lucid_sec_context(minor_status: *mut u32,
                                           kctx: *mut ::std::os::raw::c_void)
     -> u32;
    pub fn gsskrb5_extract_authz_data_from_sec_context(minor_status:
                                                           *mut u32,
                                                       context_handle:
                                                           gss_ctx_id_t,
                                                       ad_type:
                                                           ::std::os::raw::c_int,
                                                       ad_data: gss_buffer_t)
     -> u32;
    pub fn gss_krb5_set_cred_rcache(minor_status: *mut u32,
                                    cred: gss_cred_id_t, rcache: krb5_rcache)
     -> u32;
    pub fn gsskrb5_extract_authtime_from_sec_context(arg1: *mut u32,
                                                     arg2: gss_ctx_id_t,
                                                     arg3:
                                                         *mut krb5_timestamp)
     -> u32;
    pub fn gss_krb5_import_cred(minor_status: *mut u32, id: krb5_ccache,
                                keytab_principal: krb5_principal,
                                keytab: krb5_keytab, cred: *mut gss_cred_id_t)
     -> u32;
}
